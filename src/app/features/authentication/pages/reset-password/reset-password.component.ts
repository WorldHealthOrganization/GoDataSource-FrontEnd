import { Component, OnInit, ViewEncapsulation } from '@angular/core';

import { AuthDataService } from '../../../../core/services/data/auth.data.service';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';
import { SnackbarService } from '../../../../core/services/helper/snackbar.service';
import { ActivatedRoute, Router } from '@angular/router';
import { NgForm } from '@angular/forms';
import { UserDataService } from '../../../../core/services/data/user.data.service';
import { FormHelperService } from '../../../../core/services/helper/form-helper.service';

import * as _ from 'lodash';

@Component({
    selector: 'app-reset-password',
    encapsulation: ViewEncapsulation.None,
    templateUrl: './reset-password.component.html',
    styleUrls: ['./reset-password.component.less']
})
export class ResetPasswordComponent implements OnInit {

    dataModel = {
        newPassword: null
    };
    passwordConfirmModel: string;
    // token generated by API for resetting user's password
    passwordResetToken: string;

    constructor(
        private router: Router,
        private route: ActivatedRoute,
        private authDataService: AuthDataService,
        private userDataService: UserDataService,
        private snackbarService: SnackbarService,
        private formHelper: FormHelperService
    ) {
        // get the route params
        this.route.queryParams
            .subscribe((queryParams: {token}) => {
                // get the ID of the User being modified
                this.passwordResetToken = queryParams.token;
            });
    }

    ngOnInit() {

        if (
            // check if user is authenticated
            this.authDataService.isAuthenticated() ||
            // check if the password reset token is set
            !this.passwordResetToken
        ) {
            // redirect to home page (dashboard landing page if user is authenticated, or login page if not)
            this.router.navigate(['']);
        }
    }

    resetPassword(form: NgForm) {

        const dirtyFields: any = this.formHelper.getDirtyFields(form);

        if (form.valid && !_.isEmpty(dirtyFields)) {

            // reset user's password
            this.userDataService
                .resetPassword(dirtyFields, this.passwordResetToken)
                .catch((err) => {
                    this.snackbarService.showError(err.message);

                    return ErrorObservable.create(err);
                })
                .subscribe(() => {

                    this.snackbarService.showSuccess('Password changed!');

                    // redirect to login page
                    this.router.navigate(['/auth/login']);
                });
        }
    }

}
