import { Component, HostListener } from '@angular/core';
import { SystemSettingsVersionModel } from '../../../../core/models/system-settings-version.model';
import { determineRenderMode, RenderMode } from '../../../../core/enums/render-mode.enum';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthDataService } from '../../../../core/services/data/auth.data.service';
import { NgForm } from '@angular/forms';
import { FormHelperService } from '../../../../core/services/helper/form-helper.service';
import { DialogV2Service } from '../../../../core/services/helper/dialog-v2.service';
import { UserDataService } from '../../../../core/services/data/user.data.service';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';
import { ToastV2Service } from '../../../../core/services/helper/toast-v2.service';

@Component({
  selector: 'app-reset-password',
  templateUrl: './reset-password.component.html'
})
export class ResetPasswordComponent {
  // render mode
  renderMode: RenderMode = RenderMode.FULL;

  // version information
  versionData: SystemSettingsVersionModel;

  // token generated by API for resetting user's password
  passwordResetToken: string;

  // constants
  RenderMode = RenderMode;

  /**
   * Constructor
   */
  constructor(
    private router: Router,
    private formHelperService: FormHelperService,
    private dialogV2Service: DialogV2Service,
    private userDataService: UserDataService,
    private toastV2Service: ToastV2Service,
    authDataService: AuthDataService,
    activatedRoute: ActivatedRoute
  ) {
    // check if user is authenticated
    if (authDataService.isAuthenticated()) {
      // user is already authenticated; redirect to landing page
      this.router.navigate(['']);

      // finished
      return;
    }

    // update render mode
    this.updateRenderMode();

    // retrieve data
    this.versionData = activatedRoute.snapshot.data.version;
    this.passwordResetToken = activatedRoute.snapshot.queryParams.token;
  }

  /**
   * Reset password
   */
  resetPassword(form: NgForm) {
    // can't proceed ?
    if (!form.valid) {
      return;
    }

    // remove password confirm
    const dirtyFields: any = this.formHelperService.getDirtyFields(form);
    if (dirtyFields.passwordConfirm) {
      delete dirtyFields.passwordConfirm;
    }

    // show loading
    const loadingDialog = this.dialogV2Service.showLoadingDialog();

    // reset user's password
    this.userDataService
      .resetPassword(
        dirtyFields,
        this.passwordResetToken
      )
      .pipe(
        catchError((err) => {
          // hide loading
          loadingDialog.close();

          // show error
          this.toastV2Service.error(err);
          return throwError(err);
        })
      )
      .subscribe(() => {
        // hide loading
        loadingDialog.close();

        // success message
        this.toastV2Service.success('LNG_PAGE_CHANGE_PASSWORD_ACTION_CHANGE_PASSWORD_SUCCESS_MESSAGE');

        // redirect to login page
        this.router.navigate(['/auth/login']);
      });
  }

  /**
   * Update website render mode
   */
  @HostListener('window:resize')
  private updateRenderMode(): void {
    // determine render mode
    this.renderMode = determineRenderMode();
  }
}
